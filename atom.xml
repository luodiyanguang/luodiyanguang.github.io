<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卡夫卡</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-09-17T13:38:30.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Grid 网格布局</title>
    <link href="http://example.com/2020/08/21/Grid%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/"/>
    <id>http://example.com/2020/08/21/Grid%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/</id>
    <published>2020-08-21T05:25:21.000Z</published>
    <updated>2020-09-17T13:38:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Grid网格布局"><a href="#Grid网格布局" class="headerlink" title="Grid网格布局"></a>Grid网格布局</h1><h4 id="一、基本概念："><a href="#一、基本概念：" class="headerlink" title="一、基本概念："></a>一、基本概念：</h4><ul><li>它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。</li><li>Grid 布局与 <a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局</a>有一定的相似性，都可以指定容器内部多个项目的位置。Flex布局是轴线布局，只能指定项目针对轴线的位置，是一维布局。而Grid布局则是容器划分为“行”和“列“，产生单元格，可以看作是二维布局。</li><li>采用网格布局的区域称为容器，容器内部采用网格定位的子元素，称为项目，项目只能是容器的顶层子元素。</li></ul><h4 id="二、容器属性："><a href="#二、容器属性：" class="headerlink" title="二、容器属性："></a>二、容器属性：</h4><ul><li><p>display属性：</p><ul><li><p>默认情况下，容器元素都是块级元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>也可以设置为行内元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>grid-template-columns和grid-template-rows:</p><ul><li><p>grid-template-columns定义每一列的列宽，grid-template-rows定义每一行的行高</p></li><li><p>上面两个属性常常需要设置很多重复的数值，为了方便书写，常常采用以下函数：</p><ol><li><p>repeat()：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span> , <span class="number">33.3%</span>);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span> , <span class="number">33.3%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>auto-fill关键字：</p><ul><li><p>单元格大小是固定的，而容器的大小却是不确定的，如果希望每一行(或者每一列)容纳经可能多的单元格，可以用auto-fill关键词表示自动填充。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill , <span class="number">20px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>fr关键字:</p><ul><li><p>方便表示比例关系，采用 fr 关键字可以通过数值的比例关系设置单元格的大小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>minimax()：</p><ul><li><p>minmax()函数产生一个长度的范围，接收两个参数，分别是最大值和最小值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20px</span> <span class="number">10px</span> <span class="built_in">minmax</span>(<span class="number">50px</span> , <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>auto关键字：</p><ul><li>由浏览器自己决定长度。</li></ul></li></ol></li></ul></li><li><p>grid-row-gap属性，grid-columns-gap属性，grid-gap属性：</p><ul><li><p>grid-row-gap设置行间距，grid-columns-gap设置列间距。</p></li><li><p>grid-wap属性是grid-row-gap和grid-columns-gap属性的缩写。</p></li><li><p>根据最新的标准，三个属性前面的grid可以省略，可写为row-gap , columns-gap , gap.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">2px</span> <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>grid-template-areas属性：</p><ul><li><p>网络布局容许指定区域，一个区域由一个或多个单元格组成。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-row</span>: <span class="built_in">repeat</span>(<span class="number">3</span> , <span class="number">33.3%</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span> , <span class="number">33.3%</span>);</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: <span class="string">&quot;header header header&quot;</span></span><br><span class="line">                       <span class="string">&quot;main main sidebar&quot;</span></span><br><span class="line">                       <span class="string">&quot;footer footer footer&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>grid-auto-flow属性：容器内子元素的排列顺序</p><ul><li>row：（默认)先行后列，先填满第一行，之后开始第二行。</li><li>column：先列后行</li><li>row  dense ：先行后列，尽可能的紧密填满，尽量不出现空格。</li><li>column  dense ：先列后行，尽可能的紧密填满，尽量不出现空格。</li></ul></li><li><p>justify-items , align-items , place-items 属性:</p><ul><li>justify-items属性设置单元格内容的水平位置(左中右) </li><li>align-items设置单元格内容的垂直内容（上中下）</li><li>place-items属性是justify-items和align-items属性的合并<ul><li>start ：对齐单元格的起始位置</li><li>end：对齐单元格的终止位置</li><li>center：单元格内部居中</li><li>stretch：（默认）拉伸，占满单元格的整个宽度</li></ul></li></ul></li><li><p>justify-content , align-content , place-content属性：</p><ul><li>justify-content属性是整个内容区在容器中的水平位置（左中右）</li><li>align-content属性是整个内容区在容器中的垂直位置（上中下）</li><li>place-content属性是justify-content和align-content属性的合并<ul><li>start , end ,center , stretch同上</li><li>space-around：每个项目两侧的间隔相等，项目之间的间隔是项目与边框之间距离的二倍</li><li>space-between：项目之间间隔相等，项目与边框没有间隔。</li><li>space-evenly：项目之间间隔相等，项目与边框之间的距离也和项目之间的距离相等。</li></ul></li></ul></li><li><p>grid-auto-columns , grid-auto-raws属性：</p><blockquote><p>有时候，一些项目指定位置在现有网格的外部，这时，浏览器会自动生成多余的网格，以便放置项目。grid-auto-columns和grid-auto-raws用来设置浏览器自动生成网格的列宽和行高。写法同grid-template-columns和grid-template-raws。如果不指定这两个值的话，浏览器完全按照单元格内容的大小决定新增网格的列宽和行高。</p></blockquote></li></ul><h4 id="三、项目属性"><a href="#三、项目属性" class="headerlink" title="三、项目属性"></a>三、项目属性</h4><ul><li><p>grid-column-start , grid-column-end , grid-raw-start , grid-raw-end属性：</p><ul><li>grid-column-start：左边框所在的垂直网线格</li><li>grid-column-end：有边框所在的垂直网线格</li><li>grid-raw-start , grid-raw-end类似于上面两项</li></ul></li><li><p>grid-column ， grid-raw属性</p><ul><li>grid-column是grid-column-start和grid-column-end的合并</li><li>grid-raw是grid-raw-start和grid-raw-end的合并</li></ul></li><li><p>grid-area属性：指定项目放在哪一个区域</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目被放置在e区域</p></li><li><p>justify-self  , align-self , place-self属性</p><ul><li>justify-self：设置单元格内容的水平位置，与justify-items的用法相同，但是只能作用于单个项目 </li><li>align-self：设置单元格内容的垂直位置，与align-items用法相同，但只能作用于单个项目</li><li>place-self：align-self和justify-self的合并</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Grid网格布局&quot;&gt;&lt;a href=&quot;#Grid网格布局&quot; class=&quot;headerlink&quot; title=&quot;Grid网格布局&quot;&gt;&lt;/a&gt;Grid网格布局&lt;/h1&gt;&lt;h4 id=&quot;一、基本概念：&quot;&gt;&lt;a href=&quot;#一、基本概念：&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>FLex 布局</title>
    <link href="http://example.com/2020/08/20/Flex%E5%B8%83%E5%B1%80/"/>
    <id>http://example.com/2020/08/20/Flex%E5%B8%83%E5%B1%80/</id>
    <published>2020-08-20T07:30:09.000Z</published>
    <updated>2020-09-17T13:39:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h1><blockquote><p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持</p></blockquote><h4 id="一、Flex布局是什么："><a href="#一、Flex布局是什么：" class="headerlink" title="一、Flex布局是什么："></a>一、Flex布局是什么：</h4><ul><li><p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>行内元素也可以使用：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Webkit内核的浏览器，必须加上-webkit前缀：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;  <span class="comment">/* safsri */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><em>设为Flex布局以后，子元素的 float ,clear ,vertical-align属性将会失效</em></p></li></ul><h4 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h4><ul><li>采用Flex布局的元素，称为容器，他的所有子元素自动成为容器的项目。容器默认存在两根轴(main axis），水平的主轴和垂直的交叉轴(cross axis)。</li><li>项目默认是沿着主轴排列的，单个项目占据主轴的空间叫做main-size,占据的交叉空间叫做cross-size</li></ul><h4 id="三、容器的属性"><a href="#三、容器的属性" class="headerlink" title="三、容器的属性"></a>三、容器的属性</h4><ul><li>flex-direction：决定项目排列的方向<ul><li>row(默认属性)：主轴在水平方向，起点在左边</li><li>row-reserv： 主轴在水平方向上，起点在右边</li><li>column：主轴在垂直方向上，起点在上边</li><li>column-reserve：主轴在垂直方向上，起点在下边</li></ul></li><li>flex-wrap：默认情况下，所有的项目都是排列在一条轴线上的，flex-wrap设置是否换行<ul><li>now rap：不换行</li><li>wrap：换行，第一行在上方</li><li>wrap-reserve：换行，第一行在下方</li></ul></li><li>flex-flow：flex-direction和flex-wrap的简写，默认为row nowrap</li><li>justify-content：项目在主轴上的对齐方式<ul><li>flex-start：(默认)，左对齐</li><li>flex-end：右对齐</li><li>center：居中</li><li>space-between：两端对齐，项目间隔相等</li><li>space-around：项目之间间隔相等，但项目之间间隔是项目与边框之间间隔的二倍</li></ul></li><li>align-item：项目在交叉轴线上的对齐方式<ul><li>flex-start：交叉轴的起点对齐</li><li>flex-end：交叉轴的终点对齐</li><li>center：交叉轴的中点对齐</li><li>baseline：项目的第一行文字的基线对齐 </li><li>stretch：(默认值)，如果未设置项目的高度或者高度为auto，将占满整个容器的高度</li></ul></li><li>align-content：多跟轴线的对齐方式，如果只有一条轴线，该属性不起作用<ul><li>flex-start：与交叉轴的起点对齐</li><li>flex-end：与交叉轴的终点对齐</li><li>center：与交叉轴中点对齐</li><li>space-between：与交叉轴两端对齐，轴线之间间隔平均分配</li><li>space-around：两条轴线两侧的间隔相等，轴线之间的间隔是轴线与边框间隔的二倍</li><li>stretch：(默认值),轴线占满整个交叉轴</li></ul></li></ul><h4 id="四、项目属性："><a href="#四、项目属性：" class="headerlink" title="四、项目属性："></a>四、项目属性：</h4><ul><li><p>order：项目的排列顺序，数值越小，排列越靠前，默认为0，可为负数</p></li><li><p>flex-grow：项目放大比例</p><blockquote><p>默认为0，即使存在剩余空间也不会被放大</p><p>如果所有项目的flex-grow属性都是1，则它们等分剩余空间(如果有的话)</p><p>如果一个项目flex-grow为2，其余项目的均为1，则前者占据的剩余的空间是其他项目的二倍</p></blockquote></li><li><p>flex-shrink：项目的缩小比例</p><blockquote><p>默认为1，如果空间不足，项目将缩小</p><p>如果所有的项目flex-shrink均为1，当空间不足时，所有项目等比例缩小</p><p>如果一个项目的flex-shrinkk为0，其余的均为1，则该项目不缩小，其余项目等比例缩小</p><p>flex-shrink属性值为负数时无效</p></blockquote></li><li><p>flex-basis：该属性定义了在分配多余空间之前，项目占据的主轴空间(main-size),浏览器根据这个属性，计算主轴是否有多余的空间</p><blockquote><p>默认为0，即为项目本来的空间大小</p><p>可以设置为跟width和height属性一样的值，项目占据固定空间</p></blockquote></li><li><p>flex：是flex-gro、flex-shrink、flex-basis的缩写，默认为 0 1 auto,后面两个属性可选。</p></li><li><p>align-self：容许单个项目与其他项目有不一样的对齐方式，可覆盖align-item，默认值为auto。表示继承父元素的align-item的属性，如果没有父元素，等同于stretch</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Flex布局&quot;&gt;&lt;a href=&quot;#Flex布局&quot; class=&quot;headerlink&quot; title=&quot;Flex布局&quot;&gt;&lt;/a&gt;Flex布局&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTML 知识点总结</title>
    <link href="http://example.com/2020/08/15/HTML%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/08/15/HTML%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2020-08-15T11:52:03.000Z</published>
    <updated>2020-09-17T13:37:31.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、DOCTYPE标签："><a href="#一、DOCTYPE标签：" class="headerlink" title="一、DOCTYPE标签："></a>一、DOCTYPE标签：</h4><ul><li>DOCTYPE声明不是HTML标签，是用于指示WEB浏览器关于页面使用那种HTML版本进行编写指令，规定了浏览器文档使用哪种html或者xhtml规范。</li><li>可以防止浏览器在渲染文档时，切换到怪异模式（兼容模式）用浏览器自身的渲染模式，确保浏览器按照W3C标准来渲染解析页面。</li></ul><h4 id="二、meta元数据："><a href="#二、meta元数据：" class="headerlink" title="二、meta元数据："></a>二、meta元数据：</h4><ul><li>不会显示在页面上，但是对于机器是可读的。meta常用于规定页面的描述，关键词，文档作者以及最后修改时间等</li><li>一些搜索引擎会根据meta元素的name和content属性来索引界面</li></ul><h4 id="三、script标签放在body元素后面的原因："><a href="#三、script标签放在body元素后面的原因：" class="headerlink" title="三、script标签放在body元素后面的原因："></a>三、script标签放在body元素后面的原因：</h4><ul><li>因为浏览器在渲染html时是按照从上往下依次顺序进行的，当遇到js文件时，会停止当前页面的渲染，转而去下载js文件，把js文件放在文档开头时，当遇到文件很大的时候，页面延时时间过长，影响用户体验。解决方法：<ol><li>把 js 文件放到body元素后面</li><li>通过defer\async属性将 js 文件转为异步下载</li></ol></li><li>defer\async都是让 js 文件异步加载，不同的是，前者需要在整个文档渲染完成才执行，而后者在下载完成后会暂停html的解析，转去执行 js 文件</li></ul><h4 id="四、src和href的区别："><a href="#四、src和href的区别：" class="headerlink" title="四、src和href的区别："></a>四、src和href的区别：</h4><p>href是超文本引用，指向    资源的位置，建立与目标文件之间的联系；src目标是把资源下载到页面中。浏览器解析方式href不会阻塞对文档的处理，而src会阻塞对文档的处理</p><h4 id="五、行内元素和块级元素："><a href="#五、行内元素和块级元素：" class="headerlink" title="五、行内元素和块级元素："></a>五、行内元素和块级元素：</h4><ul><li>分类<ol><li>常见的块级元素：adress , div , h1~h6 , p , hr , ol , ul , li , table , tr , form , nav , header , article , aside ,  section , footer , canvas , audio </li><li>常见的行内元素： a , span , br , img , lable , input , textarea , video</li><li>可变元素： button , map</li></ol></li><li>区别：<ol><li>块级元素总是在新行上开始，可以设置宽度和高度，不设置的话继承父元素的宽度。块级元素可以容纳行内元素和其他元素</li><li>行内元素都排列在同一行，width和height不可设置，但是line-height可以设置，设置margin时只对左右有效，而padding四面都是有效的。</li></ol></li></ul><h4 id="六、div-模拟textarea"><a href="#六、div-模拟textarea" class="headerlink" title="六、div 模拟textarea:"></a>六、div 模拟textarea:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.textarea</span> &#123;</span></span><br><span class="line">width: 400px;</span><br><span class="line">min-height: 60px;</span><br><span class="line">max-height: 300px;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">overflow-x: hidden;</span><br><span class="line">overflow-y: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">contenteditable</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​                              </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;一、DOCTYPE标签：&quot;&gt;&lt;a href=&quot;#一、DOCTYPE标签：&quot; class=&quot;headerlink&quot; title=&quot;一、DOCTYPE标签：&quot;&gt;&lt;/a&gt;一、DOCTYPE标签：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;DOCTYPE声明不是HTML标签，是用于指示W</summary>
      
    
    
    
    
  </entry>
  
</feed>
