{"meta":{"title":"卡夫卡","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Grid 网格布局","slug":"Grid网格布局","date":"2020-08-21T05:25:21.000Z","updated":"2020-09-17T13:38:30.000Z","comments":true,"path":"2020/08/21/Grid网格布局/","link":"","permalink":"http://example.com/2020/08/21/Grid%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/","excerpt":"","text":"Grid网格布局一、基本概念： 它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。 Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。Flex布局是轴线布局，只能指定项目针对轴线的位置，是一维布局。而Grid布局则是容器划分为“行”和“列“，产生单元格，可以看作是二维布局。 采用网格布局的区域称为容器，容器内部采用网格定位的子元素，称为项目，项目只能是容器的顶层子元素。 二、容器属性： display属性： 默认情况下，容器元素都是块级元素。 123div &#123; display: grid;&#125; 也可以设置为行内元素。 123div &#123; display: inline-grid;&#125; grid-template-columns和grid-template-rows: grid-template-columns定义每一列的列宽，grid-template-rows定义每一行的行高 上面两个属性常常需要设置很多重复的数值，为了方便书写，常常采用以下函数： repeat()： 12345div &#123; display: grid; grid-template-columns: repeat(3 , 33.3%); grid-template-rows: repeat(3 , 33.3%);&#125; auto-fill关键字： 单元格大小是固定的，而容器的大小却是不确定的，如果希望每一行(或者每一列)容纳经可能多的单元格，可以用auto-fill关键词表示自动填充。 1234div &#123; display: grid; grid-template-columns: repeat(auto-fill , 20px);&#125; fr关键字: 方便表示比例关系，采用 fr 关键字可以通过数值的比例关系设置单元格的大小。 1234div &#123; display: grid; grid-template-columns: 1fr 1fr 2fr;&#125; minimax()： minmax()函数产生一个长度的范围，接收两个参数，分别是最大值和最小值。 1234div &#123; display: grid; grid-template-columns: 20px 10px minmax(50px , 100px);&#125; auto关键字： 由浏览器自己决定长度。 grid-row-gap属性，grid-columns-gap属性，grid-gap属性： grid-row-gap设置行间距，grid-columns-gap设置列间距。 grid-wap属性是grid-row-gap和grid-columns-gap属性的缩写。 根据最新的标准，三个属性前面的grid可以省略，可写为row-gap , columns-gap , gap. 1234.container &#123; display: grid; gap: 2px 3px;&#125; grid-template-areas属性： 网络布局容许指定区域，一个区域由一个或多个单元格组成。 12345678container &#123; display: grid; grid-template-row: repeat(3 , 33.3%); grid-template-columns: repeat(3 , 33.3%); grid-template-areas: &quot;header header header&quot; &quot;main main sidebar&quot; &quot;footer footer footer&quot;&#125; grid-auto-flow属性：容器内子元素的排列顺序 row：（默认)先行后列，先填满第一行，之后开始第二行。 column：先列后行 row dense ：先行后列，尽可能的紧密填满，尽量不出现空格。 column dense ：先列后行，尽可能的紧密填满，尽量不出现空格。 justify-items , align-items , place-items 属性: justify-items属性设置单元格内容的水平位置(左中右) align-items设置单元格内容的垂直内容（上中下） place-items属性是justify-items和align-items属性的合并 start ：对齐单元格的起始位置 end：对齐单元格的终止位置 center：单元格内部居中 stretch：（默认）拉伸，占满单元格的整个宽度 justify-content , align-content , place-content属性： justify-content属性是整个内容区在容器中的水平位置（左中右） align-content属性是整个内容区在容器中的垂直位置（上中下） place-content属性是justify-content和align-content属性的合并 start , end ,center , stretch同上 space-around：每个项目两侧的间隔相等，项目之间的间隔是项目与边框之间距离的二倍 space-between：项目之间间隔相等，项目与边框没有间隔。 space-evenly：项目之间间隔相等，项目与边框之间的距离也和项目之间的距离相等。 grid-auto-columns , grid-auto-raws属性： 有时候，一些项目指定位置在现有网格的外部，这时，浏览器会自动生成多余的网格，以便放置项目。grid-auto-columns和grid-auto-raws用来设置浏览器自动生成网格的列宽和行高。写法同grid-template-columns和grid-template-raws。如果不指定这两个值的话，浏览器完全按照单元格内容的大小决定新增网格的列宽和行高。 三、项目属性 grid-column-start , grid-column-end , grid-raw-start , grid-raw-end属性： grid-column-start：左边框所在的垂直网线格 grid-column-end：有边框所在的垂直网线格 grid-raw-start , grid-raw-end类似于上面两项 grid-column ， grid-raw属性 grid-column是grid-column-start和grid-column-end的合并 grid-raw是grid-raw-start和grid-raw-end的合并 grid-area属性：指定项目放在哪一个区域 123.item-1 &#123; grid-area: e;&#125; 项目被放置在e区域 justify-self , align-self , place-self属性 justify-self：设置单元格内容的水平位置，与justify-items的用法相同，但是只能作用于单个项目 align-self：设置单元格内容的垂直位置，与align-items用法相同，但只能作用于单个项目 place-self：align-self和justify-self的合并","categories":[],"tags":[]},{"title":"FLex 布局","slug":"Flex布局","date":"2020-08-20T07:30:09.000Z","updated":"2020-09-17T13:39:05.000Z","comments":true,"path":"2020/08/20/Flex布局/","link":"","permalink":"http://example.com/2020/08/20/Flex%E5%B8%83%E5%B1%80/","excerpt":"","text":"Flex布局 2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持 一、Flex布局是什么： Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局。 123.box &#123; display: flex;&#125; 行内元素也可以使用： 123.box &#123; display: inline-flex;&#125; Webkit内核的浏览器，必须加上-webkit前缀： 1234.box &#123; display: -webkit-flex; /* safsri */ display: flex;&#125; 设为Flex布局以后，子元素的 float ,clear ,vertical-align属性将会失效 二、基本概念 采用Flex布局的元素，称为容器，他的所有子元素自动成为容器的项目。容器默认存在两根轴(main axis），水平的主轴和垂直的交叉轴(cross axis)。 项目默认是沿着主轴排列的，单个项目占据主轴的空间叫做main-size,占据的交叉空间叫做cross-size 三、容器的属性 flex-direction：决定项目排列的方向 row(默认属性)：主轴在水平方向，起点在左边 row-reserv： 主轴在水平方向上，起点在右边 column：主轴在垂直方向上，起点在上边 column-reserve：主轴在垂直方向上，起点在下边 flex-wrap：默认情况下，所有的项目都是排列在一条轴线上的，flex-wrap设置是否换行 now rap：不换行 wrap：换行，第一行在上方 wrap-reserve：换行，第一行在下方 flex-flow：flex-direction和flex-wrap的简写，默认为row nowrap justify-content：项目在主轴上的对齐方式 flex-start：(默认)，左对齐 flex-end：右对齐 center：居中 space-between：两端对齐，项目间隔相等 space-around：项目之间间隔相等，但项目之间间隔是项目与边框之间间隔的二倍 align-item：项目在交叉轴线上的对齐方式 flex-start：交叉轴的起点对齐 flex-end：交叉轴的终点对齐 center：交叉轴的中点对齐 baseline：项目的第一行文字的基线对齐 stretch：(默认值)，如果未设置项目的高度或者高度为auto，将占满整个容器的高度 align-content：多跟轴线的对齐方式，如果只有一条轴线，该属性不起作用 flex-start：与交叉轴的起点对齐 flex-end：与交叉轴的终点对齐 center：与交叉轴中点对齐 space-between：与交叉轴两端对齐，轴线之间间隔平均分配 space-around：两条轴线两侧的间隔相等，轴线之间的间隔是轴线与边框间隔的二倍 stretch：(默认值),轴线占满整个交叉轴 四、项目属性： order：项目的排列顺序，数值越小，排列越靠前，默认为0，可为负数 flex-grow：项目放大比例 默认为0，即使存在剩余空间也不会被放大 如果所有项目的flex-grow属性都是1，则它们等分剩余空间(如果有的话) 如果一个项目flex-grow为2，其余项目的均为1，则前者占据的剩余的空间是其他项目的二倍 flex-shrink：项目的缩小比例 默认为1，如果空间不足，项目将缩小 如果所有的项目flex-shrink均为1，当空间不足时，所有项目等比例缩小 如果一个项目的flex-shrinkk为0，其余的均为1，则该项目不缩小，其余项目等比例缩小 flex-shrink属性值为负数时无效 flex-basis：该属性定义了在分配多余空间之前，项目占据的主轴空间(main-size),浏览器根据这个属性，计算主轴是否有多余的空间 默认为0，即为项目本来的空间大小 可以设置为跟width和height属性一样的值，项目占据固定空间 flex：是flex-gro、flex-shrink、flex-basis的缩写，默认为 0 1 auto,后面两个属性可选。 align-self：容许单个项目与其他项目有不一样的对齐方式，可覆盖align-item，默认值为auto。表示继承父元素的align-item的属性，如果没有父元素，等同于stretch","categories":[],"tags":[]},{"title":"HTML 知识点总结","slug":"HTML 知识点总结","date":"2020-08-15T11:52:03.000Z","updated":"2020-09-17T13:37:31.000Z","comments":true,"path":"2020/08/15/HTML 知识点总结/","link":"","permalink":"http://example.com/2020/08/15/HTML%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/","excerpt":"","text":"一、DOCTYPE标签： DOCTYPE声明不是HTML标签，是用于指示WEB浏览器关于页面使用那种HTML版本进行编写指令，规定了浏览器文档使用哪种html或者xhtml规范。 可以防止浏览器在渲染文档时，切换到怪异模式（兼容模式）用浏览器自身的渲染模式，确保浏览器按照W3C标准来渲染解析页面。 二、meta元数据： 不会显示在页面上，但是对于机器是可读的。meta常用于规定页面的描述，关键词，文档作者以及最后修改时间等 一些搜索引擎会根据meta元素的name和content属性来索引界面 三、script标签放在body元素后面的原因： 因为浏览器在渲染html时是按照从上往下依次顺序进行的，当遇到js文件时，会停止当前页面的渲染，转而去下载js文件，把js文件放在文档开头时，当遇到文件很大的时候，页面延时时间过长，影响用户体验。解决方法： 把 js 文件放到body元素后面 通过defer\\async属性将 js 文件转为异步下载 defer\\async都是让 js 文件异步加载，不同的是，前者需要在整个文档渲染完成才执行，而后者在下载完成后会暂停html的解析，转去执行 js 文件 四、src和href的区别：href是超文本引用，指向 资源的位置，建立与目标文件之间的联系；src目标是把资源下载到页面中。浏览器解析方式href不会阻塞对文档的处理，而src会阻塞对文档的处理 五、行内元素和块级元素： 分类 常见的块级元素：adress , div , h1~h6 , p , hr , ol , ul , li , table , tr , form , nav , header , article , aside , section , footer , canvas , audio 常见的行内元素： a , span , br , img , lable , input , textarea , video 可变元素： button , map 区别： 块级元素总是在新行上开始，可以设置宽度和高度，不设置的话继承父元素的宽度。块级元素可以容纳行内元素和其他元素 行内元素都排列在同一行，width和height不可设置，但是line-height可以设置，设置margin时只对左右有效，而padding四面都是有效的。 六、div 模拟textarea:1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; .textarea &#123; width: 400px; min-height: 60px; max-height: 300px; margin: 0 auto; overflow-x: hidden; overflow-y: auto; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;textarea&quot; contenteditable=&quot;true&quot;&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; ​","categories":[],"tags":[]}],"categories":[],"tags":[]}