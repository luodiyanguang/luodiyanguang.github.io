{"meta":{"title":"卡夫卡","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Vue Router","slug":"Vue Router","date":"2020-08-28T04:20:17.000Z","updated":"2020-09-30T17:35:13.000Z","comments":true,"path":"2020/08/28/Vue Router/","link":"","permalink":"http://example.com/2020/08/28/Vue%20Router/","excerpt":"","text":"一、引入 后端路由阶段 早期的网站开发整个HTML页面是由服务器来渲染的.服务器直接生产渲染好对应的HTML页面, 返回给客户端进行展示. 一个页面有自己对应的网址, 也就是URL.URL会发送到服务器, 服务器会通过正则对该URL进行匹配, 并且最后交给一个Controller进行处理. 当我们页面中需要请求不同的路径内容时, 交给服务器来进行处理, 服务器渲染好整个页面, 并且将页面返回给客户端。这种情况下渲染好的页面, 不需要单独加载任何的js和css, 可以直接交给浏览器展示, 这样也有利于SEO的优化。 前端路由阶段： 前后端分离阶段： 随着Ajax的出现, 有了前后端分离的开发模式. 后端只提供API来返回数据, 前端通过Ajax获取数据, 并且可以通过JavaScript将数据渲染到页面中. 这样做最大的优点就是前后端责任的清晰, 后端专注于数据上, 前端专注于交互和可视化上. 当移动端(iOS/Android)出现后, 后端不需要进行任何处理, 依然使用之前的一套API即可. 单页面富应用阶段： 在前后端分离的基础上加上一层前端路由. 二、安装和使用 安装 npm install vue-router –save 在模块化工程中使用 导入路由对象并调用Vue.use(VueRouter) 创建路由实例并传入路由映射配置 在Vue实例中挂载创建的路由实例 使用vue-router的过程 创建路由组件 配置路由映射 通过 &lt;router-link&gt; 和 &lt;router-view&gt;使用路由 实例 123456789101112131415// 在router/index.js中import Vue from &quot;vue&quot;import VueRouter from &#x27;vue-router&#x27;//注入插件Vue.use(VueRouter)//定义路由const routes = []//创建路由实例const router = new VueRouter(&#123; routes， mode: history&#125;)//导出路由实例export default router 12345678910//挂载到Vue实例上import Vue from &#x27;vue&#x27;import App from &#x27;./App&#x27;import router from &#x27;./router&#x27;new Vue(&#123; el: &#x27;#App&#x27;, router, rander: h =&gt; h(app)&#125;) 1234567891011121314151617181920//使用vue-router//已创建路由组件home和about//在router/index.js中导入并修改routersconst Home =&gt; import(&#x27;./home&#x27;)const About =&gt; import(&#x27;./about&#x27;)const routes = [ &#123; path: &#x27;/&#x27;, rederict: &#x27;/home&#x27; &#125;, &#123; path: &#x27;/home&#x27;, component: Home &#125;, &#123; path: &#x27;/about&#x27;, component: About &#125;] 12345678&lt;!-- 在App.vue中使用路由 --&gt;&lt;template&gt; &lt;div id &#x3D; &#39;app&#39;&gt; &lt;router-link to &#x3D; &#39;&#x2F;home&#39;&gt;首页&lt;&#x2F;router-link&gt; &lt;router-link to &#x3D; &#39;&#x2F;about&#39;&gt;关于&lt;&#x2F;router-link&gt; &lt;router-view&gt;&lt;&#x2F;router-view&gt; &lt;&#x2F;div&gt;&lt;&#x2F;template&gt; 三、动态路由匹配 把某种模式匹配到的所有路由，全都映射到同个组件。例如，我们有一个 User 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。我们可以在 vue-router 的路由路径中使用“动态路径参数”(dynamic segment) 来达到这个效果 12345routes: [ // 动态路径参数 以冒号开头 &#123; path: &#x27;/user/:id&#x27;, component: User &#125; ]//参数值会被设置到 this.$route.params 模式 匹配路径 $router.params /user/:username /user/evan {username: ‘evan’} /user/:username/pst/:post_id /user/evan/post/123 {username: ‘evan’ , post_id: ‘123’} 四、嵌套路由 &lt;router-ciew&gt; &lt;router-view&gt; 组件是一个 functional 组件，渲染路径匹配到的视图组件。&lt;router-view&gt; 渲染的组件还可以内嵌自己的 &lt;router-view&gt;，根据嵌套路径，渲染嵌套组件。 123456789101112131415161718192021222324252627const User = &#123; template: ` &lt;div class=&quot;user&quot;&gt; &lt;h2&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/h2&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; `&#125;//要在嵌套的出口中渲染组件，需要在 VueRouter 的参数中使用 children 配置const router = new VueRouter(&#123; routes: &#123; [ path: &#x27;/user/:id&#x27;, component: User, children: [ &#123; path: &#x27;profile&#x27; component: UserProfile &#125;, &#123; path: &#x27;post&#x27;, component:UserPost &#125; ] &#125; ]&#125;) 编程式导航 点击&lt;router-link ：to = &#39;...&#39;&gt;进行路由跳转时，就等同于调用了router.push(...) 123456789//router.push的应用//字符串router.push(&#x27;home&#x27;)//对象router.push(&#123;path: &#x27;home&#x27;&#125;)//命名路由router.push(&#123;name: &#x27;user&#x27;, params: &#123;userId: &#x27;123&#x27;&#125;&#125;)//带查询参数，变成register?plan=privaterouter.push(&#123;path: &#x27;register&#x27; , query: &#123;plan: &#x27;private&#x27;&#125;&#125;) 点击&lt;router-link ：to = &#39;...&#39; replace&gt;进行路由跳转时,就等同于调用了router.replace(...) router.replace的使用方法同router.push router.go(n) 123456789101112// 在浏览器记录中前进一步，等同于 history.forward()router.go(1)// 后退一步记录，等同于 history.back()router.go(-1)// 前进 3 步记录router.go(3)// 如果 history 记录不够用，那就默默地失败呗router.go(-100)router.go(100) 五、导航守卫 基本概念 正如其名，vue-router 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。导航守卫就是路由跳转过程中一些钩子函数。 全局导航守卫 路由实例上直接操作的钩子函数，所有路由配置的组件都会触发，即触发路由就会触发这些钩子函数。 全局前置守卫：beforeEach(to , from , next) 当一个导航触发时，全局前置守卫按照创建的顺序调用，守卫是异步解析的，此时导航在所有守卫resolve完之前一直处于等待状态。可进行登陆验证。 123456const router = new VueRouter(&#123; //...&#125;)router.beforeEach((to , from , next) =&gt; &#123; // ...&#125;) to: Route：即将要进入的目标路由对象 from:Route：当前导航正要离开的路由对象 next:Function：一定要调用该方法来resolve这个钩子，执行效果依赖于next方法中调用的参数 next()：进行管道中的下一个钩子，如果全部钩子执行完，则导航的状态就是confirmed（确认的）。 next(false)：中断当前的导航，如果当前的URL改变了（可能是用户手动输入或者点击后退按钮），那么URL就会重置到from路由对应的地址。 next(&#39;/&#39;)或者next(&#123;path: &#39;/&#39;&#125;)：当前导航被中断，进行一个新的导航，跳转到一个新的地址，可以向next传递任意地址对象。 next(error)：导航被终止，且该错误被传递给router.onError()注册过的回调。 确保 next 函数在任何给定的导航守卫中都被严格调用一次。它可以出现多于一次，但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错。 全局解析守卫：beforeResolve(to , from , next) 你可以用 router.beforeResolve 注册一个全局守卫。这和 router.beforeEach 类似，区别是在导航被确认之前，同时在组件内守卫和异步路由组件被解析之后，解析守卫就被调用。即在beforeRouteUpdate和beforeRouteEnter之后，在afterEach之前被调用。 全局后置钩子：afterEach(to , from) 路由跳转完成后触发，和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身。 单个路由独享的导航守卫：beforeEnter(to , from , next) 123456789101112// 单个路由配置上直接定义beforeEnter守卫const router = new VueRouter(&#123; routes: [ &#123; path: &#x27;/foo&#x27;, component: Foo, beforeEnter: (to , from , next) =&gt; &#123; // ... &#125; &#125; ]&#125;) 组件内的导航守卫 组件内执行的钩子函数，直接定义在组件中 1234567891011121314151617181920212223242526&lt;template&gt; ...&lt;/template&gt;export default&#123; data()&#123; //... &#125;, beforeRouteEnter (to, from, next) &#123; // 在渲染该组件的对应路由被 confirm 前调用 // 不！能！获取组件实例 `this` // 因为当守卫执行前，组件实例还没被创建 &#125;, beforeRouteUpdate (to, from, next) &#123; // 在当前路由改变，但是该组件被复用时调用 // 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候， // 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。 // 可以访问组件实例 `this` &#125;, beforeRouteLeave (to, from, next) &#123; // 导航离开该组件的对应路由时调用 // 可以访问组件实例 `this` &#125;&#125;&lt;style&gt; ...&lt;/style&gt; beforeRouteEnter守卫不能使用this，因为守卫在导航确认前被调用，即将登场的新组件还没有被创建。不过可以通过一个回调给next来访问组件实例。在导航被确认的时候执行回调，并把组件实例作为回调函数的参数。 12345beforeRouteEnter(to , from , next) &#123; next(vm =&gt; &#123; // 通过`vm`访问组件实例 &#125;)&#125; beforeRouteEnter是支持给next传递回调的唯一守卫。对于beforeRouteUpdate和beforeRouteLeave来说，this已经存在，不需要支持传递回调。 beforeRouteLeave常用于禁止用户还未保存修改前突然离开，该导航可通过next(false)来取消。 12345678beforeRouteLeave(to , from , next) &#123; const answer = window.confirm(&#x27;Do you really want to leave? you have unsaved changes!&#x27;) if(answer)&#123; next() &#125;else&#123; next(false) &#125;&#125; 六、完整的导航解析流程 导航被触发。 在失效的组件内调用beforeRouteLeave守卫 调用全局的beforeEach守卫 在重用组件内调用beforeRouteUpdate守卫 在路由配置里调用beforeEnter守卫 解析异步路由组件。 在被激活组件里调用beforeRouteEnter守卫 调用全局的beforeResolve守卫 导航被确认。 调用全局的afterEach守卫 触发DOM更新。 调用beforeRouteEnter守卫中传递给next的回调函数，创建好的组件实例会作为参数传入。","categories":[],"tags":[]},{"title":"Vue 组件","slug":"Vue 组件","date":"2020-08-26T08:14:16.000Z","updated":"2020-09-21T09:49:00.000Z","comments":true,"path":"2020/08/26/Vue 组件/","link":"","permalink":"http://example.com/2020/08/26/Vue%20%E7%BB%84%E4%BB%B6/","excerpt":"","text":"一、组件注册 组件名： html对大小写不敏感，js对大小写敏感。组件名是驼峰命名方式时，在组件被使用时需要使用短横线链接，html中attribute 也是大小写不敏感的，所以用驼峰命名法命名的组件名和attribute在使用时需要用短横线连接 全局注册 123Vue.component(&#x27;component-a&#x27;,&#123;/***/&#125;)Vue.component(&#x27;component-b,&#123;/****/&#125;)new Vue(&#123;el:&#x27;#app&#x27;&#125;) 12345&lt;div id=&#x27;app&#x27;&gt; &lt;component-a&gt;&lt;/component-a&gt; &lt;component-a&gt;&lt;/component-a&gt; &lt;component-b&gt;&lt;/component-b&gt;&lt;/div&gt; 模块系统中局部注册 12345678910// 在组件componentB中注册componentA和componentCimport componentA from &#x27;./componentA&#x27;import componentC from &#x27;./componentC&#x27;export default&#123; components: &#123; componentA, componentC &#125;&#125; 12345678/* 组件componentB的模版 */&lt;template&gt; &lt;div id=&#x27;component-b&#x27;&gt; &lt;component-a&gt;&lt;/component-a&gt; &lt;component-a&gt;&lt;/component-a&gt; &lt;component-b&gt;&lt;/component-b&gt; &lt;/div&gt;&lt;/template&gt; 二、Prop 传递静态或者动态的Prop 传递动态prop：使用v-bind:props.attribute = ‘attribute’ 传递静态prop 字符串：props.attribute = ‘strings’ 数字：v-bind: props.attribute = ‘number’ 12&lt;component-a v-bind:age=&#x27;42&#x27;&gt;&lt;/component-a&gt;/* 即使&#x27;42&#x27;是静态的，但是，还是需要使用`v-bind`告诉`Vue`,这是一个JavaScript表达式而不是一个字符串 */ 传递静态布尔值，数组字面量和对象字面量时同传递静态数字 123456&lt;component-a :is-good = &#x27;true&#x27;&gt;&lt;/component-a&gt;&lt;component-b :result= &#x27;[87,56,76,97]&#x27;&gt;&lt;/component-b&gt;&lt;component-c :person = &quot;&#123; name: tom, age: 25 &#125;&quot; 传入一个对象的所有属性 ： 1234post: &#123; id: 1, title: &#x27;My Journey with Vue&#x27;&#125; 1&lt;blog-post v-bind=&quot;post&quot;&gt;&lt;/blog-post&gt; 等价于 1234&lt;blog-post v-bind:id=&quot;post.id&quot; v-bind:title=&quot;post.title&quot;&gt;&lt;/blog-post&gt; 非prop的attribute 一个非 prop 的 attribute 是指传向一个组件，但是该组件并没有相应 prop 定义的 attribute。 组件可以接受任意的 attribute，而这些 attribute 会被添加到这个组件的根元素上。 12&lt;bootstrap-date-input data-date-picker=&quot;activated&quot;&gt;&lt;/bootstrap-date-input&gt;/* data-date-picker=&quot;activated&quot; attribute 就会自动添加到 `&lt;bootstrap-date-input&gt;` 的根元素上 */ 替换/合并已有的attribute 对于绝大多数 attribute 来说，从外部提供给组件的值会替换掉组件内部设置好的值。所以如果传入 type=&quot;text&quot; 就会替换掉 type=&quot;date&quot; 并把它破坏！庆幸的是，class 和 style attribute 会稍微智能一些，即两边的值会被合并起来，从而得到最终的值 三、自定义事件 事件名 不同于组件和 prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或 property 名，并且 v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以事件名需要不应该使用驼峰命名法，而应该使用短横线。 自定义组件的v-modle v-modle只是语法糖，其具体的实现过程为： 123&lt;input v-modle=&#x27;sth&#x27;/&gt;&lt;input :value=&#x27;sth&#x27; @input=&#x27;sth = $event.target.value&#x27;/&gt;/* 上面两者表示相同的意思，后者是前者实现的原理 */ 给组件添加v-modle时，默认会利用value的prop和input事件 为了能让组件使用v-modle，这个组件内的 &lt;input&gt; 必须： 将其 value attribute 绑定到一个名叫 value 的 prop 上 在其 input 事件被触发时，将新的值通过自定义的 input 事件抛出 1234567891011Vue.component(&#x27;custom-input&#x27; , &#123;props: [&#x27;value&#x27;],template: ` &lt;input :value = &#x27;value&#x27; @input = &#x27;$emit(&#x27;input&#x27; , $event.target.value)&#x27; /&gt;`&#125;)/* 现在v-modle可以在组件内使用了 */&lt;custom-input v-mmodle= &#x27;price&#x27;&gt;&lt;/custom-input&gt; v-model 应用到组件上，会有一些体验不好的场景。因为它默认会把 value 作为组件的属性，把 input作为给组件绑定事件时的事件名。可以在定义组件时通过 model 选项的方式来定制 prop/event： 123456789101112/* 子组件 */export default &#123; model: &#123; prop: &#x27;num&#x27;, // 自定义属性名 event: &#x27;addNum&#x27; // 自定义事件名 &#125;, props: &#123; num: Number, &#125;/* 在父组件中使用 */&lt;my-button v-model=&quot;number&quot;&gt;&lt;/my-button&gt; 四、插槽 编译作用域： 父组件模版里面的东西都会在父级作用域内编译，子组件模版里面的东西都会在子级作用 域内编译 12345&lt;my-con v-show=&#x27;isShow&#x27;&gt;&lt;/my-con&gt;&lt;!-- 在父级作用域中有attribute: isShow:true , 在子级作用域中有attribute： isShow：false 该模块可以渲染并显示出来，此时，它被当作一个实例被使用，在父级作用域中，此时isShow: true--&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译 --&gt; &lt;div id=&quot;app&quot;&gt; &lt;!-- 使用isShow，会看看isShow是在哪个模板里，会把cpn当做div看待，这里是在app模板里，会使用app父组件的isShow、names --&gt; &lt;cpn v-show=&quot;isShow&quot;&gt;&lt;/cpn&gt; &lt;!-- cpn在父级模版中，被当作一个实例被使用，是父级作用域，能显示 --&gt; &lt;cpn v-for=&quot;item in names&quot;&gt; &lt;!-- 同上，使用父级作用域中的names --&gt; &lt;div&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt; &lt;/cpn&gt; &lt;/div&gt; &lt;!-- 这里是在cpn模板里，会使用cpn子组件的isShow --&gt; &lt;template id=&quot;cpn&quot;&gt; &lt;div&gt; &lt;h3&gt;我是子组件&lt;/h3&gt; &lt;button v-show=&quot;isShow&quot;&gt;按钮&lt;/button&gt; &lt;slot&gt;&lt;/slot&gt; &lt;hr&gt; &lt;/div&gt; &lt;/template&gt; &lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue(&#123; el: &#x27;#app&#x27;, data: &#123; message: &#x27;你好啊&#x27;, isShow: true, names: [11, 22, 33] &#125;, components: &#123; cpn: &#123; template: &#x27;#cpn&#x27;, data() &#123; return &#123; isShow: false, names: [44, 55, 66] &#125; &#125; &#125;, &#125; &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 插槽默值： 给插槽提供一个默认值，只会在没有给插槽提供内容时使用默认值 具名插槽 1234567891011121314151617181920212223&lt;!-- 插槽定义时 --&gt;&lt;base-layout&gt; &lt;head&gt; &lt;slot name = &#x27;head&#x27;&gt;&lt;/slot&gt; &lt;/head&gt; &lt;main&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/main&gt;&lt;/base-layout&gt;&lt;!-- 插槽被实例化时 --&gt;&lt;base-layout&gt; &lt;template v-slot:head&gt; &lt;h4&gt;hello world&lt;/h4&gt; &lt;/template&gt; &lt;p&gt;A paragraph for the main content.&lt;/p&gt; &lt;p&gt;And another one.&lt;/p&gt;&lt;!-- 上面两行代码是没有设置name属性的slot的模版，一个不带 name 的 &lt;slot&gt; 出口会带有隐含的名 字“default”，上面两行也可表示为 &lt;template v-slot:default&gt; &lt;p&gt;A paragraph for the main content.&lt;/p&gt; &lt;p&gt;And another one.&lt;/p&gt; &lt;/template&gt;--&gt;&lt;/base-layout&gt; 作用域插槽 通过给slot绑定子组件的attribute实现在父级作用域中实例化组件时可以使用子组件的attribute。 绑定在&lt;slot&gt;上的attribute被称为插槽prop 动态插槽名 12345&lt;base-layout&gt; &lt;template v-slot:[dynamicSlotName]&gt; &lt;!-- 定义动态插槽名 --&gt; ... &lt;/template&gt;&lt;/base-layout&gt; 具名插槽的缩写 把参数之前的所有内容 (v-slot:) 替换为字符 #。例如 v-slot:header 可以被重写为 #header 五、动态组件 动态组件 在来回切换组件的时候，组件会被重新渲染，可以通过&lt;keep-alive&gt;保存组件的缓存切换时不去重新渲染，可以提高效率，也能缓存上次切换之前的状态 &lt;keep-alive&gt; 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 &lt;transition&gt; 相似，&lt;keep-alive&gt; 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在组件的父组件链中。 当组件在 &lt;keep-alive&gt; 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行。 六、处理边界情况 访问根实例： $root 在每个 new Vue 实例的子组件中，其根实例可以通过 $root property 进行访问 当前组件树的根 Vue 实例 访问父组件 和 $root 类似，$parent property 可以用来从一个子组件访问父组件的实例。它提供了一种机会，可以在后期随时触达父级组件，以替代将数据以 prop 的方式传入子组件的方式。 访问子组件 1234&lt;!-- 通过 ref 这个 attribute 为子组件赋予一个 ID 引用 --&gt;&lt;base-input ref=&quot;usernameInput&quot;&gt;&lt;/base-input&gt;&lt;!-- 在父组件中通过$refs访问 --&gt;this.$refs.usernameInput 依赖注入 在访问父级组件实例时，$parent比较难扩展到更深层次的组件嵌套上，而依赖注入很好的避免了这一点，它用到了两个新的实例选项：provide 和 inject。 1234567//provide 选项允许我们指定我们想要提供给后代组件的数据/方法 provide: function() &#123; return &#123; getMap: this.getMap &#125;;//然后在任何后代组件里，我们都可以使用 inject 选项来接收指定的我们想要添加在这个实例上的 property：inject: [&#x27;getMap&#x27;] 你可以把依赖注入看作一部分“大范围有效的 prop”，除了： 祖先组件不需要知道哪些后代组件使用它提供的 property 后代组件不需要知道被注入的 property 来自哪里","categories":[],"tags":[]},{"title":"Vue 基础","slug":"Vue 基础","date":"2020-08-24T11:16:10.000Z","updated":"2020-09-17T14:59:37.000Z","comments":true,"path":"2020/08/24/Vue 基础/","link":"","permalink":"http://example.com/2020/08/24/Vue%20%E5%9F%BA%E7%A1%80/","excerpt":"","text":"一、基本概念 一套用于构建用户界面的渐进式框架， 安装 直接用&lt;script&gt;引入，Vue被注册为一个全局变量 制作原型或学习，使用罪行版本： 1&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; 对于生产环境，推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏： 1&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.6.12&quot;&gt;&lt;/script&gt; 使用原生的ES Modules，这里也有一个兼容 ES Module 的构建文件： 123&lt;script type=&quot;module&quot;&gt; import Vue from &#x27;https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.esm.browser.js&#x27;&lt;/script&gt; NPM： 在用 Vue 构建大型应用时推荐使用 NPM 安装[1]。NPM 能很好地和诸如 webpack 或 Browserify 模块打包器配合使用。同时 Vue 也提供配套工具来开发单文件组件。 Vue实例 每个Vue实例都是通过Vue函数创建的新的Vue实例 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;script src=&quot;js/vue.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; &lt;/div&gt; &lt;script&gt; const app = new Vue(&#123; el: &quot;#app&quot;, data: &#123; message: &quot;hello Vue&quot; &#125; &#125;) &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统,当一个Vue实例被创建时，它的data对象的所有prototype均加入到Vue的响应式系统。当这些prototype 的值发生改变时，试图产生响应，匹配为最新的值。 只有当实例被创建的时候就已经存在于data中的prototype才是响应式的。如果新添加一个prototype，则对它的改变不会响应到视图。可以在刚开始的时候设置一些值使其值为空。 生命周期钩子 所有的生命周期钩子都自动绑定到this的上下文实例中。因此你可以访问数据，对prototye和放大进行计算。 在beforeCreate和created之间的生命周期： 初始化事件，数据观测。在created的时候,数据和data进行了绑定。此时还没有el 选项。 created和beforeMount之间的生命周期： 首先判断是否有el元素，有的话继续向下编译，没有则停止编译,直到在该Vue实例上调用vm.$mount(el). 网页中的渲染顺序：rander函数 &lt; template模版 &lt; outer选项 beforeCreate: 在实例初始化之后，在数据观测(data observe)和event/watcher事件配置之前调用。 created： 实例创建后立即被调用，此时已经配置好的是：数据观测(data observe),prototype和方法的运算。watch/event事件回调，挂载还没有开始，$el不可用。 beforeMount： 挂载之前被调用，相关的rander函数第一次被调用，该钩子在服务器端渲染期间不能被调用。 Mounted： 实例被挂载之后调用，这时候el被新创建的vm.$el替代。注意,Mounted并不能保证所有的自组件也都一起挂载，如果希望等到整个视图都渲染完毕，可以在Mounted内部使用：vm.$nextTick.该钩子在服务器渲染期间不会被调用。 beforeUpdata： 数据更新时调用，发生在虚拟DOM打补丁之前，适用于在更新之前访问现有DOM,该钩子在服务器端渲染期间不被调用 Updated： 数据更改导致虚拟DOM 重新渲染和打补丁，在这之后调用该钩子。可执行依赖于DOM的操作。应该避免此期间的状态改变，可用计算属性和watch替换。updated不会保证所有的子组件都会被一起重绘，如果要等到需所有的组件都被重绘，可以在updated里面调用vm.$nextTick. activated： 被keep-alive缓存的组件激活时调用，服务器端渲染期间不会被调用。 deactivated： 被keep-alive缓存的组件停用时调用 beforeDestroy： 实例销毁之前调用，此时实例仍然可用。 destroyed： 实例销毁后被调用，该钩子被调用后，对应的Vue指令都解绑，所有的事件监听器被移除，所有额子实例也被销毁。 模版语法Vue.j使用了基于html的模版语法，声明式的把DOM绑定至底层Vue实例数据上。在底层的实现上，Vue将模版编译成虚拟DOM渲染函数，结合响应系统，计算出最少需要重新渲染的组件并把DOM操作减少到最少。 文本数据绑定： Mustache语法，双大括号&#123;&#123;&#125;&#125;。 原始html：使用指令v-html 123456&lt;p&gt; use Mustaches: &#123;&#123;rawhtml&#125;&#125; &lt;!-- rawhtml会被转化为字符串，不能转换为html文本 --&gt;&lt;/p&gt;&lt;p&gt; using v-html diretive: &lt;span v-html=&quot;rawhtml&quot;&gt;&lt;/span&gt; &lt;!-- span中的内容会被转换为rawhtml中的html文件 --&gt;&lt;/p&gt; 计算属性和侦听属性 计算属性：computed，可以像绑定普通prototype 一样绑定计算属性 计算属性不同于普通的methods方法，它是基于响应式依赖进行缓存的，只有在响应式依赖发生改变时才会重新计算值。 计算属性的特点： 数据可进行逻辑处理，减少模版中的计算 可以对计算属性中的值进行计算 依赖固定的数据类型（响应式数据） 计算属性有ge t和set方法组成，分别用来获取和设置计算属性，set设置属性时，不直接修改计算属性的值，而是修改它的依赖。 计算属性和侦听属性： 侦听属性： 比计算属性更加通用的方法来观察和响应Vue实例上的数据变动。watch中可以执行任何的逻辑，如函数节流，AJAX异步获取数据，甚至操作DOM 。使用watch时通常会用到handler回调，之后还有两个属性deep：设置为true用于监听对象内部值的变化。immediate 设置为true将立即以表达式的当前值触发回调。不加deep的话，只能监听值得变化，不能返回回调函数。 watch：监测的是属性，只要有属性的变化，都会触发执行回调函数。而computed 监测的是依赖值，只有依赖值发生改变的时候，才去重新计算。watch不能处理异步操作。 Class和Style的绑定 通过v-bind动态的绑定class和style，此时，绑定的数据可以是普通类型，也可以是一个数组，对象。v-bind可以简写为: 普通动态绑定： 123&lt;div :class=&#123;active: isActive&#125;&gt; &lt;!-- isActive的值影响到该类是否被添加上 --&gt;&lt;/div&gt; 也可以绑定 数组，对象，普通字符串常量 绑定在组件上：当在自定义组件上使用：组件自定义时添加class时，这些class被添加到该组件的根元素上，然后在使用它的时候再去给他动态绑定class，这时候和原来组件自定义时添加的class相互存在。 绑定内联样式： v-bind:style 是一个JavaScript对象.CSS 中prototype名可以采用驼峰命名，也可以采用短横线分割。可以是对象，数组等。 多重值：可以给style中的prototype 提供一个包含多个值的数组，常用于提供多个带前缀的值。例如： 1&lt;div :style=&quot;&#123; display: [&#x27;-webkit-box&#x27;, &#x27;-ms-flexbox&#x27;, &#x27;flex&#x27;] &#125;&quot;&gt;&lt;/div&gt; 这样写只会渲染浏览器支持的最后一个值 条件渲染 v-if 、 v-else 、 v-else-if 用key 管理 可服用组件： Vue会尽可能高效的渲染元素，通常会复用已有的元素。但是有时候需要把两个组件分别处理。可以给他两分别添加唯一的key值即可。渲染的时候不会再进行复用。 v-show ：带有v-show的元素始终会被渲染并保留在DOM中，v-show只是简单的切换元素的css的display属性。 v-show不支持&lt;template&gt;元素，也不支持v-else元素 v-if和v-show的区别： v-if是真正的条件渲染，确保切换过程中条件块类事件监听器和子组件的销毁与重建。 v-if也是惰性的，它只有在判断条件为真的情况下才会去渲染条件块。初始时条件为假的话，不会渲染条件块。 v-show在什么情况下都会被渲染 ，只会是css中display属性的转换而已。 一般而言，v-if有更高的切换开销，而v-show有更高的初始化渲染开销。 v-if与v-for一起使用： 二者一起使用的时候，v-for具有较高的优先级。 列表渲染 v-for基于数组 item in items (item , index) in items v-for基于对象 value in items (value , index) in items (value , name , index) in items //value是prototype的值，name是prototype的名字，index 是索引号 维护状态： 当Vue更新v-for渲染的元素列表时，它默认使用“就地更新“。如果数据项的顺序被改变，Vue不会移动DOM元素匹配数据项的顺序，而是就地更改每个元素，并且确保它们的索引位置正确渲染。 这个默认的模式是高效的，但是只适用于不依赖子组件状态或者临时的DOM状态(例如：表单输入值)的列表渲染输出。 可以给每一项提供一个唯一的 key，跟踪每一个节点的身份。建议尽可能的使用key，除非遍历输出DOM的简单节点或者刻意依赖默认的行为提升性能。 事件处理 事件的监听： 通过v-on监听DOM事件并触发JavaScript代码。v-on可以简写为@ 对象语法： 1&lt;button v-on = &#x27;&#123;mousedown: dothis , mouseup: doThat&#125;&#x27;&gt;&lt;/button&gt; 修饰符: .stop：调用event.stopPropagation(),阻止事件冒泡以及事件捕获 .prevent：调用event.stopDefault()，阻止元素默认事件 .self：只当事件是从侦听器绑定的元素本身触发时才触发回调 .native：监听组件根元素的原生事件 .once：只触发一次回调 .left：只当点击鼠标左键时触发 .passive：对应addEventListener中的选项passive，设置为true时表示listener永不会调用preventDefault()。 表单输入绑定 v-model指令在表单&lt;input&gt; , &lt;textarea&gt; , &lt;select&gt; 元素上创建双向数据绑定。 v-modle绑定元素时使用不同的prototype和事件 text和textarea元素使用value prototype 和input事件 checkbox和radio元素使用checked prototype和change事件 select元素使用value prototype和change事件 修饰符 .lazy：v-modle在每次input 事件后将输入框的值与数据进行绑定，添加lazy 修饰符后，值的绑定在change事件之后。 .number：v-modle绑定的值都会被转化为字符串 类型，可以使用.number修饰符让绑定数据自动转化为数字类型，如果这个值不能被parseFloat()解析，则返回原数据。 .trim：自动过滤用户输入的首位字符","categories":[],"tags":[]},{"title":"Grid 网格布局","slug":"Grid网格布局","date":"2020-08-21T05:25:21.000Z","updated":"2020-09-17T14:59:33.000Z","comments":true,"path":"2020/08/21/Grid网格布局/","link":"","permalink":"http://example.com/2020/08/21/Grid%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/","excerpt":"","text":"一、基本概念： 它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。 Grid 布局与 Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。Flex布局是轴线布局，只能指定项目针对轴线的位置，是一维布局。而Grid布局则是容器划分为“行”和“列“，产生单元格，可以看作是二维布局。 采用网格布局的区域称为容器，容器内部采用网格定位的子元素，称为项目，项目只能是容器的顶层子元素。 二、容器属性： display属性： 默认情况下，容器元素都是块级元素。 123div &#123; display: grid;&#125; 也可以设置为行内元素。 123div &#123; display: inline-grid;&#125; grid-template-columns和grid-template-rows: grid-template-columns定义每一列的列宽，grid-template-rows定义每一行的行高 上面两个属性常常需要设置很多重复的数值，为了方便书写，常常采用以下函数： repeat()： 12345div &#123; display: grid; grid-template-columns: repeat(3 , 33.3%); grid-template-rows: repeat(3 , 33.3%);&#125; auto-fill关键字： 单元格大小是固定的，而容器的大小却是不确定的，如果希望每一行(或者每一列)容纳经可能多的单元格，可以用auto-fill关键词表示自动填充。 1234div &#123; display: grid; grid-template-columns: repeat(auto-fill , 20px);&#125; fr关键字: 方便表示比例关系，采用 fr 关键字可以通过数值的比例关系设置单元格的大小。 1234div &#123; display: grid; grid-template-columns: 1fr 1fr 2fr;&#125; minimax()： minmax()函数产生一个长度的范围，接收两个参数，分别是最大值和最小值。 1234div &#123; display: grid; grid-template-columns: 20px 10px minmax(50px , 100px);&#125; auto关键字： 由浏览器自己决定长度。 grid-row-gap属性，grid-columns-gap属性，grid-gap属性： grid-row-gap设置行间距，grid-columns-gap设置列间距。 grid-wap属性是grid-row-gap和grid-columns-gap属性的缩写。 根据最新的标准，三个属性前面的grid可以省略，可写为row-gap , columns-gap , gap. 1234.container &#123; display: grid; gap: 2px 3px;&#125; grid-template-areas属性： 网络布局容许指定区域，一个区域由一个或多个单元格组成。 12345678container &#123; display: grid; grid-template-row: repeat(3 , 33.3%); grid-template-columns: repeat(3 , 33.3%); grid-template-areas: &quot;header header header&quot; &quot;main main sidebar&quot; &quot;footer footer footer&quot;&#125; grid-auto-flow属性：容器内子元素的排列顺序 row：（默认)先行后列，先填满第一行，之后开始第二行。 column：先列后行 row dense ：先行后列，尽可能的紧密填满，尽量不出现空格。 column dense ：先列后行，尽可能的紧密填满，尽量不出现空格。 justify-items , align-items , place-items 属性: justify-items属性设置单元格内容的水平位置(左中右) align-items设置单元格内容的垂直内容（上中下） place-items属性是justify-items和align-items属性的合并 start ：对齐单元格的起始位置 end：对齐单元格的终止位置 center：单元格内部居中 stretch：（默认）拉伸，占满单元格的整个宽度 justify-content , align-content , place-content属性： justify-content属性是整个内容区在容器中的水平位置（左中右） align-content属性是整个内容区在容器中的垂直位置（上中下） place-content属性是justify-content和align-content属性的合并 start , end ,center , stretch同上 space-around：每个项目两侧的间隔相等，项目之间的间隔是项目与边框之间距离的二倍 space-between：项目之间间隔相等，项目与边框没有间隔。 space-evenly：项目之间间隔相等，项目与边框之间的距离也和项目之间的距离相等。 grid-auto-columns , grid-auto-raws属性： 有时候，一些项目指定位置在现有网格的外部，这时，浏览器会自动生成多余的网格，以便放置项目。grid-auto-columns和grid-auto-raws用来设置浏览器自动生成网格的列宽和行高。写法同grid-template-columns和grid-template-raws。如果不指定这两个值的话，浏览器完全按照单元格内容的大小决定新增网格的列宽和行高。 三、项目属性 grid-column-start , grid-column-end , grid-raw-start , grid-raw-end属性： grid-column-start：左边框所在的垂直网线格 grid-column-end：有边框所在的垂直网线格 grid-raw-start , grid-raw-end类似于上面两项 grid-column ， grid-raw属性 grid-column是grid-column-start和grid-column-end的合并 grid-raw是grid-raw-start和grid-raw-end的合并 grid-area属性：指定项目放在哪一个区域 123.item-1 &#123; grid-area: e;&#125; 项目被放置在e区域 justify-self , align-self , place-self属性 justify-self：设置单元格内容的水平位置，与justify-items的用法相同，但是只能作用于单个项目 align-self：设置单元格内容的垂直位置，与align-items用法相同，但只能作用于单个项目 place-self：align-self和justify-self的合并","categories":[],"tags":[]},{"title":"FLex 布局","slug":"Flex布局","date":"2020-08-20T07:30:09.000Z","updated":"2020-09-17T14:59:31.000Z","comments":true,"path":"2020/08/20/Flex布局/","link":"","permalink":"http://example.com/2020/08/20/Flex%E5%B8%83%E5%B1%80/","excerpt":"","text":"2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持 一、Flex布局是什么： Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局。 123.box &#123; display: flex;&#125; 行内元素也可以使用： 123.box &#123; display: inline-flex;&#125; Webkit内核的浏览器，必须加上-webkit前缀： 1234.box &#123; display: -webkit-flex; /* safsri */ display: flex;&#125; 设为Flex布局以后，子元素的 float ,clear ,vertical-align属性将会失效 二、基本概念 采用Flex布局的元素，称为容器，他的所有子元素自动成为容器的项目。容器默认存在两根轴(main axis），水平的主轴和垂直的交叉轴(cross axis)。 项目默认是沿着主轴排列的，单个项目占据主轴的空间叫做main-size,占据的交叉空间叫做cross-size 三、容器的属性 flex-direction：决定项目排列的方向 row(默认属性)：主轴在水平方向，起点在左边 row-reserv： 主轴在水平方向上，起点在右边 column：主轴在垂直方向上，起点在上边 column-reserve：主轴在垂直方向上，起点在下边 flex-wrap：默认情况下，所有的项目都是排列在一条轴线上的，flex-wrap设置是否换行 now rap：不换行 wrap：换行，第一行在上方 wrap-reserve：换行，第一行在下方 flex-flow：flex-direction和flex-wrap的简写，默认为row nowrap justify-content：项目在主轴上的对齐方式 flex-start：(默认)，左对齐 flex-end：右对齐 center：居中 space-between：两端对齐，项目间隔相等 space-around：项目之间间隔相等，但项目之间间隔是项目与边框之间间隔的二倍 align-item：项目在交叉轴线上的对齐方式 flex-start：交叉轴的起点对齐 flex-end：交叉轴的终点对齐 center：交叉轴的中点对齐 baseline：项目的第一行文字的基线对齐 stretch：(默认值)，如果未设置项目的高度或者高度为auto，将占满整个容器的高度 align-content：多跟轴线的对齐方式，如果只有一条轴线，该属性不起作用 flex-start：与交叉轴的起点对齐 flex-end：与交叉轴的终点对齐 center：与交叉轴中点对齐 space-between：与交叉轴两端对齐，轴线之间间隔平均分配 space-around：两条轴线两侧的间隔相等，轴线之间的间隔是轴线与边框间隔的二倍 stretch：(默认值),轴线占满整个交叉轴 四、项目属性： order：项目的排列顺序，数值越小，排列越靠前，默认为0，可为负数 flex-grow：项目放大比例 默认为0，即使存在剩余空间也不会被放大 如果所有项目的flex-grow属性都是1，则它们等分剩余空间(如果有的话) 如果一个项目flex-grow为2，其余项目的均为1，则前者占据的剩余的空间是其他项目的二倍 flex-shrink：项目的缩小比例 默认为1，如果空间不足，项目将缩小 如果所有的项目flex-shrink均为1，当空间不足时，所有项目等比例缩小 如果一个项目的flex-shrinkk为0，其余的均为1，则该项目不缩小，其余项目等比例缩小 flex-shrink属性值为负数时无效 flex-basis：该属性定义了在分配多余空间之前，项目占据的主轴空间(main-size),浏览器根据这个属性，计算主轴是否有多余的空间 默认为0，即为项目本来的空间大小 可以设置为跟width和height属性一样的值，项目占据固定空间 flex：是flex-gro、flex-shrink、flex-basis的缩写，默认为 0 1 auto,后面两个属性可选。 align-self：容许单个项目与其他项目有不一样的对齐方式，可覆盖align-item，默认值为auto。表示继承父元素的align-item的属性，如果没有父元素，等同于stretch","categories":[],"tags":[]},{"title":"HTML 知识点总结","slug":"HTML 知识点总结","date":"2020-08-15T11:52:03.000Z","updated":"2020-09-17T13:37:31.000Z","comments":true,"path":"2020/08/15/HTML 知识点总结/","link":"","permalink":"http://example.com/2020/08/15/HTML%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/","excerpt":"","text":"一、DOCTYPE标签： DOCTYPE声明不是HTML标签，是用于指示WEB浏览器关于页面使用那种HTML版本进行编写指令，规定了浏览器文档使用哪种html或者xhtml规范。 可以防止浏览器在渲染文档时，切换到怪异模式（兼容模式）用浏览器自身的渲染模式，确保浏览器按照W3C标准来渲染解析页面。 二、meta元数据： 不会显示在页面上，但是对于机器是可读的。meta常用于规定页面的描述，关键词，文档作者以及最后修改时间等 一些搜索引擎会根据meta元素的name和content属性来索引界面 三、script标签放在body元素后面的原因： 因为浏览器在渲染html时是按照从上往下依次顺序进行的，当遇到js文件时，会停止当前页面的渲染，转而去下载js文件，把js文件放在文档开头时，当遇到文件很大的时候，页面延时时间过长，影响用户体验。解决方法： 把 js 文件放到body元素后面 通过defer\\async属性将 js 文件转为异步下载 defer\\async都是让 js 文件异步加载，不同的是，前者需要在整个文档渲染完成才执行，而后者在下载完成后会暂停html的解析，转去执行 js 文件 四、src和href的区别：href是超文本引用，指向 资源的位置，建立与目标文件之间的联系；src目标是把资源下载到页面中。浏览器解析方式href不会阻塞对文档的处理，而src会阻塞对文档的处理 五、行内元素和块级元素： 分类 常见的块级元素：adress , div , h1~h6 , p , hr , ol , ul , li , table , tr , form , nav , header , article , aside , section , footer , canvas , audio 常见的行内元素： a , span , br , img , lable , input , textarea , video 可变元素： button , map 区别： 块级元素总是在新行上开始，可以设置宽度和高度，不设置的话继承父元素的宽度。块级元素可以容纳行内元素和其他元素 行内元素都排列在同一行，width和height不可设置，但是line-height可以设置，设置margin时只对左右有效，而padding四面都是有效的。 六、div 模拟textarea:1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; .textarea &#123; width: 400px; min-height: 60px; max-height: 300px; margin: 0 auto; overflow-x: hidden; overflow-y: auto; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;textarea&quot; contenteditable=&quot;true&quot;&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; ​","categories":[],"tags":[]}],"categories":[],"tags":[]}